# app.py

from flask import Flask, render_template, request, jsonify
import re
from math_ia import evaluate_expression
from music_ia import generate_music
from typing import Tuple, List, Dict, Any

app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0 

# ============================================================
# 1. Rutas de la Aplicaci√≥n
# ============================================================

@app.route('/')
def index():
    """Ruta principal que sirve la interfaz de chat."""
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat_api():
    """Endpoint para procesar la consulta del usuario y generar la respuesta de la IA."""
    data = request.json
    user_query = data.get('query', '')
    files_attached = data.get('files', [])

    try:
        # 1. Procesamiento de la consulta
        response = process_query_with_ia(user_query, files_attached)
        return jsonify(response)
    except Exception as e:
        print(f"Error grave en el backend: {e}")
        return jsonify({
            'text': f"Lo siento, ocurri√≥ un error interno al procesar tu solicitud: {e}. ‚ùå",
            'toolUsed': None,
            'imageTopic': 'error',
            'sources': ['system-error.log']
        }), 500

# ============================================================
# 2. L√≥gica del Procesamiento de la IA
# ============================================================

def process_query_with_ia(query: str, files: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Analiza la consulta y genera la respuesta utilizando comprensi√≥n de lenguaje
    y delegando a m√≥dulos especializados.
    """
    query_lower = query.lower()
    tool_used = None
    image_topic = query
    sources = ["pacureia.dev", "analisis.ia"]
    music_url = None
    
    # ------------------------------------------------------------------------
    # I. DELEGACI√ìN A HERRAMIENTAS ESPEC√çFICAS
    # ------------------------------------------------------------------------

    # --- 1. M√≥dulo de M√∫sica ---
    if "crear m√∫sica" in query_lower or "generar canci√≥n" in query_lower:
        tool_used = 'music'
        # Intenta determinar g√©nero y estado de √°nimo
        genre = "pop" if "pop" in query_lower or "cumbia" in query_lower else "electr√≥nica"
        mood = "alegre" if "alegre" in query_lower or "feliz" in query_lower else "relajante"
        
        music_url = generate_music(genre, mood, duration_sec=15)
        
        if "Error" in music_url:
             response_text = f"Intent√© generar una pista de {genre} con √°nimo {mood}, pero fall√≥: {music_url} üòî."
             image_topic = "error de audio"
        else:
             response_text = f"¬°M√∫sica creada! üé∂ He generado una pista de {genre} en tono {mood} de 15 segundos. Puedes reproducirla desde la URL: {music_url}. ¬°Disfruta!üéß"
             image_topic = "nota musical"
        return {
            'text': response_text, 'toolUsed': tool_used, 'imageTopic': image_topic, 
            'sources': sources + ["music-generator.ai"], 'musicUrl': music_url
        }


    # --- 2. M√≥dulo de Matem√°ticas ---
    if re.search(r'calcula|resuelve|operaci√≥n|matem√°tica|cu√°nto es|promedio', query_lower):
        tool_used = 'math'
        expression_match = re.search(r'(\d[\d\+\-\*/\^\s\.\(\)a-z]+)', query_lower)
        
        if expression_match:
            expression = expression_match.group(1).strip()
            result = evaluate_expression(expression)
            response_text = f"Seg√∫n el m√≥dulo matem√°tico, la operaci√≥n **{expression}** es igual a **{result}**. üìê"
            image_topic = "f√≥rmulas matem√°ticas"
        else:
            response_text = "Necesito una expresi√≥n matem√°tica clara para calcular. Por ejemplo: 'calcula 5 * (10 + 2)'. ü§î"
            image_topic = "matem√°ticas"
        return {'text': response_text, 'toolUsed': tool_used, 'imageTopic': image_topic, 'sources': sources + ["math-module.py"]}

    # ------------------------------------------------------------------------
    # II. PROCESAMIENTO DE ARCHIVOS Y HERRAMIENTAS DE PRODUCTIVIDAD
    # ------------------------------------------------------------------------

    # --- 3. Herramientas Excel/Word ---
    if "excel" in query_lower or "tabla" in query_lower or "word" in query_lower or "resumen" in query_lower:
        tool_used = 'excel-word'
        if files:
            file_names = ", ".join([f['name'] for f in files])
            response_text = f"Analizando tus {len(files)} archivos ({file_names}). Estoy creando un proyecto **Excel/Word** con esta informaci√≥n. La comprensi√≥n de los archivos es clave para el resumen. üìÅ"
        else:
             response_text = "Generando estructura base para un **Proyecto Excel/Word**."
        
        response_text += " Por ejemplo, puedo generar un resumen de un documento o una tabla de presupuestos."
        image_topic = "documentos y datos"
        return {'text': response_text, 'toolUsed': tool_used, 'imageTopic': image_topic, 'sources': sources + ["office-analysis.ai"]}

    # --- 4. Herramienta Canvas (Dise√±o/Visual) ---
    if "canvas" in query_lower or "diagrama" in query_lower or "dibujo" in query_lower or "dise√±o" in query_lower:
        tool_used = 'canvas'
        response_text = "Comprendido. Te ayudar√© a generar un **dise√±o visual** (Canvas). Descr√≠beme el diagrama, la paleta de colores o el flujo que necesitas. üé®"
        image_topic = "dise√±o gr√°fico"
        return {'text': response_text, 'toolUsed': tool_used, 'imageTopic': image_topic, 'sources': sources + ["visual-design.ai"]}

    # ------------------------------------------------------------------------
    # III. PROCESAMIENTO DE LENGUAJE NATURAL (General)
    # ------------------------------------------------------------------------
    
    # Simulaci√≥n de la comprensi√≥n emocional y contextual profunda
    if "feliz" in query_lower or "alegre" in query_lower:
         sentiment = "muy positivo. üòÑ"
    elif "triste" in query_lower or "problema" in query_lower:
         sentiment = "preocupante. üòü Te ofrezco apoyo y soluciones."
    else:
         sentiment = "neutro."

    if files:
        file_list = ", ".join([f['name'] for f in files])
        response_text = f"He analizado los **{len(files)} archivos** ({file_list}) y tu consulta. Tu estado de √°nimo detectado es {sentiment}. Mi respuesta integral abarca el an√°lisis de tus documentos y la comprensi√≥n contextual de tu pregunta. ‚ú®"
    else:
        response_text = f"Tu estado de √°nimo detectado es {sentiment}. Mi comprensi√≥n del tema '{query}' es completa, usando mi capacidad de an√°lisis contextual. ¬øTe puedo ayudar con m√°s detalles o una de mis herramientas especializadas? üí°"

    return {'text': response_text, 'toolUsed': None, 'imageTopic': image_topic, 'sources': sources}


if __name__ == '__main__':
    # Creaci√≥n del directorio de salida de m√∫sica al iniciar
    os.makedirs(os.path.join(os.getcwd(), 'static', 'music_output'), exist_ok=True)
    app.run(debug=True)
